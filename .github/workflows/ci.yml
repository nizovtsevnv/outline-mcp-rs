name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  check:
    name: Check & Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true
            # CI optimizations
            max-jobs = auto
            cores = 0
            system-features = nixos-test benchmark big-parallel kvm

      - name: Setup Nix cache
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      # Cache Rust/Cargo dependencies
      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target/
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-${{ hashFiles('**/*.rs') }}
          restore-keys: |
            ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target-

      # –ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏)
      - name: Update cargo hash if needed
        run: |
          echo "üîß Checking if cargoHash needs update..."
          if ! nix build 2>/dev/null; then
            echo "üì¶ cargoHash needs update, fixing..."
            chmod +x scripts/update-cargo-hash.sh
            ./scripts/update-cargo-hash.sh
          else
            echo "‚úÖ cargoHash is up to date"
          fi

      - name: Check code formatting
        run: nix develop -c cargo fmt --all --check

      - name: Run clippy (with caching)
        run: nix develop -c cargo clippy --all-targets --all-features -- -D warnings

      # –¢–µ—Å—Ç—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç –∑–∞–∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã)
      - name: Run tests
        run: nix develop -c cargo test --verbose

      # Security checks (–±—ã—Å—Ç—Ä—ã–µ)
      - name: Security audit
        run: nix develop -c cargo audit

      - name: License check
        run: nix develop -c cargo deny check

  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∫–∏ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏)
  build-smoke-test:
    name: Build Smoke Test
    runs-on: ubuntu-latest
    needs: check
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Nix
        uses: cachix/install-nix-action@v27
        with:
          nix_path: nixpkgs=channel:nixos-unstable
          extra_nix_config: |
            experimental-features = nix-command flakes
            accept-flake-config = true

      - name: Setup Nix cache
        uses: cachix/cachix-action@v15
        with:
          name: nix-community
          authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
        continue-on-error: true

      # –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω–∞—è —Å–±–æ—Ä–∫–∞
      - name: Test native build only
        run: |
          echo "üöÄ Testing native build (smoke test)"
          nix build
          echo "‚úÖ Native build successful"
          
          # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∏–Ω–∞—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç
          if [[ -x result/bin/outline-mcp ]]; then
            echo "‚úÖ Binary is executable"
            result/bin/outline-mcp --help || echo "‚ÑπÔ∏è  Help command may require env vars"
          fi