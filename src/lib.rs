//! # Outline MCP Server
//!
//! MCP (Model Context Protocol) server for Outline knowledge base interaction
//! with focus on simplicity and performance.
//!
//! ## Design Principles
//!
//! - **Simplicity**: Direct functions instead of complex abstractions
//! - **Performance**: Static builds and minimal dependencies
//! - **Elegance**: One file for each area of responsibility
//!
//! ## Usage Example
//!
//! ```no_run
//! use outline_mcp_rs::{Config, run_stdio, run_http};
//!
//! #[tokio::main]
//! async fn main() -> outline_mcp_rs::Result<()> {
//!     let config = Config::from_env()?;
//!     
//!     // STDIO mode
//!     run_stdio(config.clone()).await?;
//!     
//!     // Or HTTP mode
//!     run_http(config).await
//! }
//! ```

#![deny(missing_docs)]
#![deny(unsafe_code)]
#![warn(clippy::all)]
#![warn(clippy::pedantic)]
#![warn(clippy::nursery)]
#![allow(clippy::module_name_repetitions)]

// –ü—É–±–ª–∏—á–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã
pub use config::Config;
pub use error::{Error, Result};

// –ú–æ–¥—É–ª–∏
pub mod config;
pub mod error;
mod mcp;
mod outline;
mod tools;

/// Run server in STDIO mode
///
/// Used for integration with MCP clients through standard input/output streams.
///
/// # Errors
///
/// Returns error on initialization or request processing problems.
pub async fn run_stdio(config: Config) -> Result<()> {
    use std::io::{self, Write};
    use tracing::{error, info};

    let stdin = io::stdin();
    let mut stdout = io::stdout();

    // Initialize Outline API client
    let outline_client = outline::Client::new(config.outline_api_key, config.outline_api_url)?;

    info!("‚úÖ STDIO server ready");

    // Main STDIO processing loop
    loop {
        let input = {
            let mut line = String::new();
            match stdin.read_line(&mut line) {
                Ok(0) => break, // EOF
                Ok(_) => line.trim_end().to_string(),
                Err(e) => {
                    error!("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è STDIN: {}", e);
                    break;
                }
            }
        };

        if input.trim().is_empty() {
            continue;
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ JSON-RPC –∑–∞–ø—Ä–æ—Å–∞
        match mcp::handle_request(&input, &outline_client).await {
            Ok(response) => {
                writeln!(stdout, "{response}")?;
                stdout.flush()?;
            }
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {}", e);
                let error_response = mcp::create_error_response(&e);
                writeln!(stdout, "{error_response}")?;
                stdout.flush()?;
            }
        }
    }

    Ok(())
}

/// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–µ–∂–∏–º–µ HTTP
///
/// –°–æ–∑–¥–∞–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ö–æ—Å—Ç–µ –∏ –ø–æ—Ä—Ç—É.
///
/// # Errors
///
/// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ—Ä—Ç—É –∏–ª–∏ HTTP transport.
pub async fn run_http(config: Config) -> Result<()> {
    use tokio::net::TcpListener;
    use tracing::{error, info};

    let addr = format!("{}:{}", config.http_host, config.http_port.as_u16());
    let listener = TcpListener::bind(&addr).await?;

    info!("üåê HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ {}", addr);
    info!("üì° –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ /mcp –¥–ª—è MCP –∑–∞–ø—Ä–æ—Å–æ–≤");

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Outline API
    let outline_client = outline::Client::new(config.outline_api_key, config.outline_api_url)?;

    loop {
        match listener.accept().await {
            Ok((stream, addr)) => {
                info!("üîó –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: {}", addr);
                let client = outline_client.clone();

                tokio::spawn(async move {
                    if let Err(e) = handle_http_connection(stream, client).await {
                        error!("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e);
                    }
                });
            }
            Err(e) => {
                error!("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e);
            }
        }
    }
}

/// –û–±—Ä–∞–±–æ—Ç–∫–∞ HTTP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
async fn handle_http_connection(
    mut stream: tokio::net::TcpStream,
    outline_client: outline::Client,
) -> Result<()> {
    use tokio::io::{AsyncBufReadExt, AsyncWriteExt, BufReader};

    let mut reader = BufReader::new(&mut stream);
    let mut request_line = String::new();
    reader.read_line(&mut request_line).await?;

    // –ü—Ä–æ—Å—Ç–∞—è HTTP –æ–±—Ä–∞–±–æ—Ç–∫–∞
    if request_line.starts_with("POST /mcp") {
        // –ß–∏—Ç–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        let mut content_length = 0;
        loop {
            let mut line = String::new();
            reader.read_line(&mut line).await?;

            if line.trim().is_empty() {
                break;
            }

            if line.to_lowercase().starts_with("content-length:") {
                if let Some(len_str) = line.split(':').nth(1) {
                    content_length = len_str.trim().parse().unwrap_or(0);
                }
            }
        }

        // –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        if content_length > 0 {
            let mut buffer = vec![0; content_length];
            tokio::io::AsyncReadExt::read_exact(&mut reader, &mut buffer).await?;
            let body = String::from_utf8(buffer)?;

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ MCP –∑–∞–ø—Ä–æ—Å–∞
            match mcp::handle_request(&body, &outline_client).await {
                Ok(response) => {
                    let http_response = format!(
                        "HTTP/1.1 200 OK\r\nContent-Type: application/json\r\nContent-Length: {}\r\n\r\n{}",
                        response.len(),
                        response
                    );
                    stream.write_all(http_response.as_bytes()).await?;
                }
                Err(e) => {
                    let error_response = mcp::create_error_response(&e);
                    let http_response = format!(
                        "HTTP/1.1 500 Internal Server Error\r\nContent-Type: application/json\r\nContent-Length: {}\r\n\r\n{}",
                        error_response.len(),
                        error_response
                    );
                    stream.write_all(http_response.as_bytes()).await?;
                }
            }
        }
    } else {
        // 404 –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø—É—Ç–µ–π
        let response = "HTTP/1.1 404 Not Found\r\nContent-Length: 0\r\n\r\n";
        stream.write_all(response.as_bytes()).await?;
    }

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_config_creation() {
        let config = Config::for_testing();
        assert!(config.validate().is_ok());
    }

    #[test]
    fn test_error_types() {
        let _error = Error::Config {
            message: "test error".to_string(),
            source: None,
        };

        // –¢–µ—Å—Ç —á—Ç–æ error —Ç–∏–ø—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        // Test passes if error creation doesn't panic
    }
}
